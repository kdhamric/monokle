{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Monokle Welcome to Monokle - your friendly desktop UI for managing k8s manifests! Monokle helps you Quickly get a high-level view of your manifests, their contained resources and relationships Easily edit resources without having to learn or look up yaml syntax Refactor resources with maintained integrity of names and references Preview and debug resources generated with kustomize or Helm Diff resources against your cluster and apply changes immediately Visualize and navigate resources in your clusters And much more! Check out the Feature Overview or watch the Monokle 1.0 walkthrough video Blog-posts Check out the following blog-posts with Monokle-related content: 1.3.0 - Release blog-post - Nov 15, 2021 1.2.0 - Release blog-post - Oct 4, 2021 1.1.0 - Release blog-post - Sep 6, 2021 1.0.0 - Initial release blog-post - Aug 10, 2021","title":"Welcome"},{"location":"#monokle","text":"Welcome to Monokle - your friendly desktop UI for managing k8s manifests! Monokle helps you Quickly get a high-level view of your manifests, their contained resources and relationships Easily edit resources without having to learn or look up yaml syntax Refactor resources with maintained integrity of names and references Preview and debug resources generated with kustomize or Helm Diff resources against your cluster and apply changes immediately Visualize and navigate resources in your clusters And much more! Check out the Feature Overview or watch the Monokle 1.0 walkthrough video","title":"Monokle"},{"location":"#blog-posts","text":"Check out the following blog-posts with Monokle-related content: 1.3.0 - Release blog-post - Nov 15, 2021 1.2.0 - Release blog-post - Oct 4, 2021 1.1.0 - Release blog-post - Sep 6, 2021 1.0.0 - Initial release blog-post - Aug 10, 2021","title":"Blog-posts"},{"location":"apply-and-diff/","text":"Applying and Diffing Resources At any time when a resource is selected in the navigator the Editor contains \"Apply\" and \"Diff\" buttons in the top right. Selecting \"Apply\" will prompt if to apply the selected resource to the currently configured Cluster. A status message will be shown in the top right after applying. Selecting \"Diff\" will diff the selected resource against the currently configured cluster; if the resource does not exist in the cluster an error will be shown if the resource does exist a Diff dialog will be shown: In this screenshot the left shows the resource in Monokle the right shows the resource retrieved from the cluster differences are highlighted as shown in the screenshot Refreshing the diff is done with the \"Refresh\" button, applying your local version of the resource to your cluster is done with \"Apply\" (!). Editing resource in Cluster Mode Monokle allows you to edit any resource viewed in Cluster mode and use the Apply button to apply those changes back to the cluster - for immediately applying \"hot fixes\" to your cluster during browsing.","title":"Apply/Diff"},{"location":"apply-and-diff/#applying-and-diffing-resources","text":"At any time when a resource is selected in the navigator the Editor contains \"Apply\" and \"Diff\" buttons in the top right. Selecting \"Apply\" will prompt if to apply the selected resource to the currently configured Cluster. A status message will be shown in the top right after applying. Selecting \"Diff\" will diff the selected resource against the currently configured cluster; if the resource does not exist in the cluster an error will be shown if the resource does exist a Diff dialog will be shown: In this screenshot the left shows the resource in Monokle the right shows the resource retrieved from the cluster differences are highlighted as shown in the screenshot Refreshing the diff is done with the \"Refresh\" button, applying your local version of the resource to your cluster is done with \"Apply\" (!).","title":"Applying and Diffing Resources"},{"location":"apply-and-diff/#editing-resource-in-cluster-mode","text":"Monokle allows you to edit any resource viewed in Cluster mode and use the Apply button to apply those changes back to the cluster - for immediately applying \"hot fixes\" to your cluster during browsing.","title":"Editing resource in Cluster Mode"},{"location":"architecture/","text":"Monokle Architecture Monokle is an Electron desktop application built with React & TypeScript. Redux Toolkit is used for state management. Visuals are done using Ant Design. Other fairly common libraries/frameworks are used internally for common functionality (see components below). This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder, which provides: - TypeScript supports for Electron main process source code - Hot-relaod support for Electron app - Electron Builder support See https://www.electron.build/ for more info on electron builder Folder structure /electron : electron main thread, contains startup code and some ipc handlers invoked from the UI /src : root for monokle UI application, contains App.tsx, Index.tsx, etc. /components : UI components - coarse to fine grained; organisms -> molecules -> atoms /constants : constants.. /models : type definitions for core objects (see below) and states /redux : redux-related code (selectors, hooks, store, reducers, thunks, services) /styles : styles.. /utils : common utility functions /assets : icons/images/etc Core objects Most logic revolves around K8sResource objects which \"encapsulate\" all data associated with a parsed resource. FileEntry objects correspond to a parsed file - which can contain 0..n K8sResource objects The AppState holds the main state of the application (see inline comments), state changes are handled by the main reducer and corresponding thunks Main UI Components The content of most high level organisms and molecules should be fairly self-explanatory. A few highlights: the FileTreePane renders the selected folder the NavigatorPane renders the main resource navigator, including sections for Helm Charts and Kustomizations the Monaco component renders the source editor using the Monaco editor (same as used by VS Code) the FormEditor component renders nice forms for K8sResources using the react-jsonschema-form component (see below), corresponding schames/uiSchemas are in the resources/form-schemas folder. 3rd party components used https://github.com/eemeli/yaml for yaml parsing https://github.com/react-monaco-editor/react-monaco-editor for source editing https://github.com/micromatch/micromatch for dynamic filtering in navigator and file exclusion matching https://github.com/JSONPath-Plus/JSONPath for finding refs/selectors in resources https://github.com/rjsf-team/react-jsonschema-form for generating forms for k8s resources https://github.com/wbkd/react-flow for graph diagrams https://github.com/tweenjs/es6-tween for animation tweening https://github.com/pengx17/monaco-yaml for yaml support in the source editor https://github.com/paulmillr/chokidar for file watching https://github.com/ant-design/ant-design/ for UI https://github.com/styled-components/styled-components for custom styling Dev Dependencies https://github.com/gsoft-inc/craco for overriding CRA config for folder aliases, see https://www.npmjs.com/package/craco-alias#examples K8s Schemas Monokle currently uses the latest 1.22.1 schemas for validation and editor functionality - see this issue for making schema version configurable. Schemas are currently taken from https://github.com/yannh/kubernetes-json-schema - strict version is used.","title":"Architecture"},{"location":"architecture/#monokle-architecture","text":"Monokle is an Electron desktop application built with React & TypeScript. Redux Toolkit is used for state management. Visuals are done using Ant Design. Other fairly common libraries/frameworks are used internally for common functionality (see components below). This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder, which provides: - TypeScript supports for Electron main process source code - Hot-relaod support for Electron app - Electron Builder support See https://www.electron.build/ for more info on electron builder","title":"Monokle Architecture"},{"location":"architecture/#folder-structure","text":"/electron : electron main thread, contains startup code and some ipc handlers invoked from the UI /src : root for monokle UI application, contains App.tsx, Index.tsx, etc. /components : UI components - coarse to fine grained; organisms -> molecules -> atoms /constants : constants.. /models : type definitions for core objects (see below) and states /redux : redux-related code (selectors, hooks, store, reducers, thunks, services) /styles : styles.. /utils : common utility functions /assets : icons/images/etc","title":"Folder structure"},{"location":"architecture/#core-objects","text":"Most logic revolves around K8sResource objects which \"encapsulate\" all data associated with a parsed resource. FileEntry objects correspond to a parsed file - which can contain 0..n K8sResource objects The AppState holds the main state of the application (see inline comments), state changes are handled by the main reducer and corresponding thunks","title":"Core objects"},{"location":"architecture/#main-ui-components","text":"The content of most high level organisms and molecules should be fairly self-explanatory. A few highlights: the FileTreePane renders the selected folder the NavigatorPane renders the main resource navigator, including sections for Helm Charts and Kustomizations the Monaco component renders the source editor using the Monaco editor (same as used by VS Code) the FormEditor component renders nice forms for K8sResources using the react-jsonschema-form component (see below), corresponding schames/uiSchemas are in the resources/form-schemas folder.","title":"Main UI Components"},{"location":"architecture/#3rd-party-components-used","text":"https://github.com/eemeli/yaml for yaml parsing https://github.com/react-monaco-editor/react-monaco-editor for source editing https://github.com/micromatch/micromatch for dynamic filtering in navigator and file exclusion matching https://github.com/JSONPath-Plus/JSONPath for finding refs/selectors in resources https://github.com/rjsf-team/react-jsonschema-form for generating forms for k8s resources https://github.com/wbkd/react-flow for graph diagrams https://github.com/tweenjs/es6-tween for animation tweening https://github.com/pengx17/monaco-yaml for yaml support in the source editor https://github.com/paulmillr/chokidar for file watching https://github.com/ant-design/ant-design/ for UI https://github.com/styled-components/styled-components for custom styling","title":"3rd party components used"},{"location":"architecture/#dev-dependencies","text":"https://github.com/gsoft-inc/craco for overriding CRA config for folder aliases, see https://www.npmjs.com/package/craco-alias#examples","title":"Dev Dependencies"},{"location":"architecture/#k8s-schemas","text":"Monokle currently uses the latest 1.22.1 schemas for validation and editor functionality - see this issue for making schema version configurable. Schemas are currently taken from https://github.com/yannh/kubernetes-json-schema - strict version is used.","title":"K8s Schemas"},{"location":"cluster-compare/","text":"Cluster Compare The Cluster Compare functionality allows you to compare a set of local resources (vanilla or generated with Helm/Kustomize) to the resources in your clusters, allowing you to easily see which of your local resources are different in the cluster deploy your local resources to the cluster replace your local resources with the ones from the cluster compare the resources from Helm chart and Kustomize previews to the cluster resources To use Cluster Compare follow these steps: Browse to a folder containing manifests / kustomizations / Helm charts Preview the desired kustomization or helm values file Select the desired cluster context in the Cluster tab to the left Press the \"Cluster Compare\" button at the top of the Resource Navigator: Check out the below short video to see how it in action:","title":"Cluster Compare"},{"location":"cluster-compare/#cluster-compare","text":"The Cluster Compare functionality allows you to compare a set of local resources (vanilla or generated with Helm/Kustomize) to the resources in your clusters, allowing you to easily see which of your local resources are different in the cluster deploy your local resources to the cluster replace your local resources with the ones from the cluster compare the resources from Helm chart and Kustomize previews to the cluster resources To use Cluster Compare follow these steps: Browse to a folder containing manifests / kustomizations / Helm charts Preview the desired kustomization or helm values file Select the desired cluster context in the Cluster tab to the left Press the \"Cluster Compare\" button at the top of the Resource Navigator: Check out the below short video to see how it in action:","title":"Cluster Compare"},{"location":"cluster-integration/","text":"Cluster Integration Although Monokle is mainly geared at working with manifest files, it also has the possibility to connect to a cluster and show all contained resources, providing a convenient and easy way to inspect cluster resources. Selecting the \"Cluster Preview\" button in the left toolbar replaces the File Explorer with a Clusters tab: The kubeconfig field sets which kubeconfig to use for cluster interactions (this is the same as in the global settings) Selecting the \"Show Cluster Objects\" button will attempt to populate the Resource Navigator with objects from the configured cluster: Monokle is now in \"Cluster Mode\" (as indicated by the header at the top): the File Explorer has been disabled if a folder had been previously selected the Navigator contains all resources retrieved from the configured cluster: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Exit\" in the top right restores the contents of the Resource Navigator to the currently selected folder (if any) (You can also exit Cluster Mode by selecting the File Explorer in the left toolbar and selecting a new folder with the \"Browse\" button)","title":"Cluster Integration"},{"location":"cluster-integration/#cluster-integration","text":"Although Monokle is mainly geared at working with manifest files, it also has the possibility to connect to a cluster and show all contained resources, providing a convenient and easy way to inspect cluster resources. Selecting the \"Cluster Preview\" button in the left toolbar replaces the File Explorer with a Clusters tab: The kubeconfig field sets which kubeconfig to use for cluster interactions (this is the same as in the global settings) Selecting the \"Show Cluster Objects\" button will attempt to populate the Resource Navigator with objects from the configured cluster: Monokle is now in \"Cluster Mode\" (as indicated by the header at the top): the File Explorer has been disabled if a folder had been previously selected the Navigator contains all resources retrieved from the configured cluster: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Exit\" in the top right restores the contents of the Resource Navigator to the currently selected folder (if any) (You can also exit Cluster Mode by selecting the File Explorer in the left toolbar and selecting a new folder with the \"Browse\" button)","title":"Cluster Integration"},{"location":"development/","text":"Development Monokle is an Electron desktop application built with React & TypeScript. This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder, which provides: - TypeScript supports for Electron main process source code - Hot-relaod support for Electron app - Electron Builder support Check out the Architecture document for more information. Building & running Prerequisites Download & Install Git . OSX and Linux machines typically have this already installed. Download & Install Node.js and the npm package manager Clone this repository Make sure you are running the node version specified in .npmrc or if you are using nvm you can run the nvm install command to quickly install and use the required node version Running Install npm dependencies npm install Start the application npm run electron:dev Hot reloading The Electron app will reload if you make edits in the electron directory. You will also see any lint errors in the console. Building Run the following command to build the Electron app package for production npm run electron:build The output will be located in the dist folder. Help & Support Feel free to reach out and ask questions on our Discord server","title":"Development"},{"location":"development/#development","text":"Monokle is an Electron desktop application built with React & TypeScript. This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder, which provides: - TypeScript supports for Electron main process source code - Hot-relaod support for Electron app - Electron Builder support Check out the Architecture document for more information.","title":"Development"},{"location":"development/#building-running","text":"","title":"Building &amp; running"},{"location":"development/#prerequisites","text":"Download & Install Git . OSX and Linux machines typically have this already installed. Download & Install Node.js and the npm package manager Clone this repository Make sure you are running the node version specified in .npmrc or if you are using nvm you can run the nvm install command to quickly install and use the required node version","title":"Prerequisites"},{"location":"development/#running","text":"Install npm dependencies npm install Start the application npm run electron:dev","title":"Running"},{"location":"development/#hot-reloading","text":"The Electron app will reload if you make edits in the electron directory. You will also see any lint errors in the console.","title":"Hot reloading"},{"location":"development/#building","text":"Run the following command to build the Electron app package for production npm run electron:build The output will be located in the dist folder.","title":"Building"},{"location":"development/#help-support","text":"Feel free to reach out and ask questions on our Discord server","title":"Help &amp; Support"},{"location":"faq/","text":"1. What are the prerequisites for using Monokle? You will need to install the following two prerequisites to successfully run Monokle: Helm - required for Helm Preview functionality Kubectl - required for Kustomize Preview and Apply/Diff functionality 2. What OS does Monokle support? Monokle supports Windows, MacOS and Linux - get the latest installers for MacOS and Windows on GitHub . For running Monokle on Linux you have to run it from the source, follow the steps as outlined in the Getting Started documentation. 3. Why can\u2019t I add any clusters? While adding new clusters, a valid kubeconfig file is required. Please check that all the needed configuration settings are present in your kubeconfig file are valid or not For more detail read kubeconfig documentation. 4. Why is Kubectl required to run Monokle? You need to install and configure kubectl for previewing kustomization.yaml files. It helps to debug your configurations before you deploy them to your cluster. 5. Does Monokle support Helm? Yes, Monokle allows you to navigate and preview the output of a Helm chart for an existing values files - read more at Working with Helm . 6. Can I work on multiple projects simultaneously? You can launch multiple project windows using the New Monokle Windows option. It allows you to work on multiple folders or clusters simultaneously thus visual navigation for the multiple pages becomes simpler and faster. 7. Can I use Monokle with Flux/ArgoCD? Yes, Monokle can be used for creating / editing / debugging manifests before they are deployed to a cluster using a CD tool like ArgoCD or Flux. 8. How to open Helm and Kustomization preview? You can navigate to the resources created by Kustomize or Helm in the navigator. Hover over the resources and hit the button to perform the preview and see the generated resources in the navigator. 9. Why is Autocomplete not working in the editor? The source editor provides an auto-complete option for only native Kubernetes resources. Therefore, autocomplete feature would not work with any other resource except the resources in the YAML manifests. 10. How to save changes in the editor? The source editor automatically saves the current changes in your resource manifests as long as they are valid yaml files.","title":"FAQ"},{"location":"faq/#1-what-are-the-prerequisites-for-using-monokle","text":"You will need to install the following two prerequisites to successfully run Monokle: Helm - required for Helm Preview functionality Kubectl - required for Kustomize Preview and Apply/Diff functionality","title":"1. What are the prerequisites for using Monokle?"},{"location":"faq/#2-what-os-does-monokle-support","text":"Monokle supports Windows, MacOS and Linux - get the latest installers for MacOS and Windows on GitHub . For running Monokle on Linux you have to run it from the source, follow the steps as outlined in the Getting Started documentation.","title":"2. What OS does Monokle support?"},{"location":"faq/#3-why-cant-i-add-any-clusters","text":"While adding new clusters, a valid kubeconfig file is required. Please check that all the needed configuration settings are present in your kubeconfig file are valid or not For more detail read kubeconfig documentation.","title":"3. Why can\u2019t I add any clusters?"},{"location":"faq/#4-why-is-kubectl-required-to-run-monokle","text":"You need to install and configure kubectl for previewing kustomization.yaml files. It helps to debug your configurations before you deploy them to your cluster.","title":"4. Why is Kubectl required to run Monokle?"},{"location":"faq/#5-does-monokle-support-helm","text":"Yes, Monokle allows you to navigate and preview the output of a Helm chart for an existing values files - read more at Working with Helm .","title":"5. Does Monokle support Helm?"},{"location":"faq/#6-can-i-work-on-multiple-projects-simultaneously","text":"You can launch multiple project windows using the New Monokle Windows option. It allows you to work on multiple folders or clusters simultaneously thus visual navigation for the multiple pages becomes simpler and faster.","title":"6. Can I work on multiple projects simultaneously?"},{"location":"faq/#7-can-i-use-monokle-with-fluxargocd","text":"Yes, Monokle can be used for creating / editing / debugging manifests before they are deployed to a cluster using a CD tool like ArgoCD or Flux.","title":"7. Can I use Monokle with Flux/ArgoCD?"},{"location":"faq/#8-how-to-open-helm-and-kustomization-preview","text":"You can navigate to the resources created by Kustomize or Helm in the navigator. Hover over the resources and hit the button to perform the preview and see the generated resources in the navigator.","title":"8. How to open Helm and Kustomization preview?"},{"location":"faq/#9-why-is-autocomplete-not-working-in-the-editor","text":"The source editor provides an auto-complete option for only native Kubernetes resources. Therefore, autocomplete feature would not work with any other resource except the resources in the YAML manifests.","title":"9. Why is Autocomplete not working in the editor?"},{"location":"faq/#10-how-to-save-changes-in-the-editor","text":"The source editor automatically saves the current changes in your resource manifests as long as they are valid yaml files.","title":"10. How to save changes in the editor?"},{"location":"features/","text":"Feature Overview Here is a short list of some of the features currently in Monokle. A big thanks to the excellent Argo-Rollouts project on GitHub for providing plentiful manifests for us to run Monokle against. Navigate k8s objects easily Monokle compiles a list of all the objects in your repo (from files you didnt want ignored), to give you a handy overview of all your resources - read more Validate and follow links up- or downstream through your manifests Surf up- or downstream through your resources! Monokle highlights other resources, that your selection has direct relations to and even provides you with the links to go to them quickly - read more Preview resources generated by kustomize and Helm Do a quick dry-run, enabling you to navigate and debug the resources created by Kustomize or Helm. Apply them to the cluster if you are satisfied - read more about Kustomize and Helm Locate source file quickly, and see if links are dead-ends When you select a resource, Monokle will show you which file it was defined in. Also, if you mistype a referenced resource, Monokle will quickly show you, that you have a dead link with a warning triangle. Browse and update your clusters objects Want to browse your cluster instead of a repo? Simply smash the \"Show Cluster Objects\" button to import all objects from the cluster into Monokle - read more . If you need to make any immediate hot-fixes simply modify the resource in the source editor and click the \"Apply\" button.","title":"Feature Overview"},{"location":"features/#feature-overview","text":"Here is a short list of some of the features currently in Monokle. A big thanks to the excellent Argo-Rollouts project on GitHub for providing plentiful manifests for us to run Monokle against.","title":"Feature Overview"},{"location":"features/#navigate-k8s-objects-easily","text":"Monokle compiles a list of all the objects in your repo (from files you didnt want ignored), to give you a handy overview of all your resources - read more","title":"Navigate k8s objects easily"},{"location":"features/#validate-and-follow-links-up-or-downstream-through-your-manifests","text":"Surf up- or downstream through your resources! Monokle highlights other resources, that your selection has direct relations to and even provides you with the links to go to them quickly - read more","title":"Validate and follow links up- or downstream through your manifests"},{"location":"features/#preview-resources-generated-by-kustomize-and-helm","text":"Do a quick dry-run, enabling you to navigate and debug the resources created by Kustomize or Helm. Apply them to the cluster if you are satisfied - read more about Kustomize and Helm","title":"Preview resources generated by kustomize and Helm"},{"location":"features/#locate-source-file-quickly-and-see-if-links-are-dead-ends","text":"When you select a resource, Monokle will show you which file it was defined in. Also, if you mistype a referenced resource, Monokle will quickly show you, that you have a dead link with a warning triangle.","title":"Locate source file quickly, and see if links are dead-ends"},{"location":"features/#browse-and-update-your-clusters-objects","text":"Want to browse your cluster instead of a repo? Simply smash the \"Show Cluster Objects\" button to import all objects from the cluster into Monokle - read more . If you need to make any immediate hot-fixes simply modify the resource in the source editor and click the \"Apply\" button.","title":"Browse and update your clusters objects"},{"location":"getting-started/","text":"Getting Started Download & Install Download and install the latest version from GitHub below macOS Download the .dmg file Windows Download the .exe file Linux (since Monokle 1.3.0) Download the .appImage / .deb file for your platform Run from source See Development on how to run Monokle from its source-code. Install dependencies Monokle uses Helm, Kubectl and Kustomize for corresponding preview functionality Helm - required for Helm Preview functionality Kubectl or Kustomize - required for Kustomize Preview and Apply/Diff functionality Read tutorials Check out one of our tutorials to get started: How to work with Manifests to get you started with basic concepts How to Browser Clusters to help you interact with your cluster(s) How to Configure Monokle to see how you can set up Monokle to your needs How to Fix Broken Links to give you an idea of how Monokle can be used for resource validation and correction How to work with ConfigMaps to see how the Form editor for ConfigMaps helps you edit resources withouth having to write any YAML Get in touch! Have problems? Suggestions? Feature requests? Please join our Discord Server and let us know - or open an issue on GitHub .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#download-install","text":"Download and install the latest version from GitHub below","title":"Download &amp; Install"},{"location":"getting-started/#macos","text":"Download the .dmg file","title":"macOS"},{"location":"getting-started/#windows","text":"Download the .exe file","title":"Windows"},{"location":"getting-started/#linux-since-monokle-130","text":"Download the .appImage / .deb file for your platform","title":"Linux (since Monokle 1.3.0)"},{"location":"getting-started/#run-from-source","text":"See Development on how to run Monokle from its source-code.","title":"Run from source"},{"location":"getting-started/#install-dependencies","text":"Monokle uses Helm, Kubectl and Kustomize for corresponding preview functionality Helm - required for Helm Preview functionality Kubectl or Kustomize - required for Kustomize Preview and Apply/Diff functionality","title":"Install dependencies"},{"location":"getting-started/#read-tutorials","text":"Check out one of our tutorials to get started: How to work with Manifests to get you started with basic concepts How to Browser Clusters to help you interact with your cluster(s) How to Configure Monokle to see how you can set up Monokle to your needs How to Fix Broken Links to give you an idea of how Monokle can be used for resource validation and correction How to work with ConfigMaps to see how the Form editor for ConfigMaps helps you edit resources withouth having to write any YAML","title":"Read tutorials"},{"location":"getting-started/#get-in-touch","text":"Have problems? Suggestions? Feature requests? Please join our Discord Server and let us know - or open an issue on GitHub .","title":"Get in touch!"},{"location":"helm/","text":"Working with Helm Monokle has built-in support for Helm - a popular tool for managing kubernetes configurations: Monokle can identify and show Helm charts and their values files Monokle can preview resources generated by Helm, helping you debug your charts before you deploy them to your cluster (requires Helm to be installed and configured in your PATH) (all examples below are from the Emissary Ingress charts folder - clone and try these yourself!) Helm Navigation When selecting a folder containing Helm charts (identified by Chart.yaml files), these will automatically be displayed in a \"Helm Charts\" section on top of the Navigator: In the screenshot: the Helm Charts section shows the \"emissary-ingress\" Helm chart and the contained values files (only one in this example) the single values.yaml file has been selected the corresponding values.yaml file has been highlighted to the left the content of the file is shown in the Source editor to the right The Navigator at this point shows any K8s resources that Monokle finds in the selected folder Helm Preview The Helm Preview functionality helps you understand what resources would be installed in your cluster when running Helm with a specific values file. Hovering over a values file reveals a \"Preview\" action to the right: Selecting this action will run Helm on the selected file with either the install or template option (as configured in the global settings) and replace the contents of the Navigator with the generated resources. For example previewing the values file above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Helm with the selected values file resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different values file will preview the output of Helm for that file instead selecting \"Exit\" in the top right or next to the values file restores the previous resource navigator. Editing of values files during preview When previewing a Helm values file it is possible to edit the previewed file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files (instead of having to exit and recreate the preview to maka a change).","title":"Working with Helm Charts"},{"location":"helm/#working-with-helm","text":"Monokle has built-in support for Helm - a popular tool for managing kubernetes configurations: Monokle can identify and show Helm charts and their values files Monokle can preview resources generated by Helm, helping you debug your charts before you deploy them to your cluster (requires Helm to be installed and configured in your PATH) (all examples below are from the Emissary Ingress charts folder - clone and try these yourself!)","title":"Working with Helm"},{"location":"helm/#helm-navigation","text":"When selecting a folder containing Helm charts (identified by Chart.yaml files), these will automatically be displayed in a \"Helm Charts\" section on top of the Navigator: In the screenshot: the Helm Charts section shows the \"emissary-ingress\" Helm chart and the contained values files (only one in this example) the single values.yaml file has been selected the corresponding values.yaml file has been highlighted to the left the content of the file is shown in the Source editor to the right The Navigator at this point shows any K8s resources that Monokle finds in the selected folder","title":"Helm Navigation"},{"location":"helm/#helm-preview","text":"The Helm Preview functionality helps you understand what resources would be installed in your cluster when running Helm with a specific values file. Hovering over a values file reveals a \"Preview\" action to the right: Selecting this action will run Helm on the selected file with either the install or template option (as configured in the global settings) and replace the contents of the Navigator with the generated resources. For example previewing the values file above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Helm with the selected values file resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different values file will preview the output of Helm for that file instead selecting \"Exit\" in the top right or next to the values file restores the previous resource navigator.","title":"Helm Preview"},{"location":"helm/#editing-of-values-files-during-preview","text":"When previewing a Helm values file it is possible to edit the previewed file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files (instead of having to exit and recreate the preview to maka a change).","title":"Editing of values files during preview"},{"location":"kustomize/","text":"Working with Kustomize Monokle has built-in support for Kustomize - a popular tool for managing kubernetes configurations: Monokle can visualize dependencies and relationships between kustomize files to help you understand the scope of a specific kustomization Monokle can preview resources generated by Kustomize, helping you debug your configurations before you deploy them to your cluster (requires kubectl to be installed and configured in your PATH) (all examples below are from the Argo Rollouts manifest folder - clone and try these yourself!) Kustomize Navigation When selecting a folder containing kustomization.yaml files, these will automatically be displayed in a \"Kustomizations\" section on top of the Navigator: In the screenshot: the Kustomizations section shows all kustomization.yaml files - named after the folder they are in relative to the selected root folder the \"base\" kustomization.yaml has been selected the corresponding kustomization.yaml file has been highlighted to the left all \"downstream\" kustomizations and included resources are highlighted in the Navigator, helping you understand the \"scope\" of the selected kustomization the content of the kustomzation resource is shown in the Source editor to the right, with corresponding resource links marked in the code Just as with K8s resources, hovering over the link-icon to the right of the kustomization name shows its outgoing links: (here we can see the 10 resources included by the selected kustomization) Hovering the link-icon to the left of the kustomization name shows its incoming links: (here we see two \"upstream\" kustomizations that include the selected kustomization in their configuration) Kustomize Preview While the above helps you understand the relationships and dependencies between kustomizations and their included resources, the Preview functionality helps you understand what resources would be installed in your cluster when running kustomize. Hovering over a kustomization reveals a \"Preview\" action to the right: Selecting this action will run kustomize on the selected file with the \"-k\" option and replace the contents of the Navigator with the generated resources. For example previewing the \"base\" kustomization above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Kustomize with the \"base\" kustomization: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different kustomization will preview the output of kustomize for that resource instead selecting \"Exit\" in the top right or next to the kustomization restores the previous resource navigator. In the screenshot we can see that the selected kustomization resulted in 10 resources - and that they contain references to the image specified in the kustomization configuration: Editing of kustomizations during preview When previewing a kustomization it is possible to edit the previewed kustomization.yaml file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files (instead of having to exit and recreate the preview to maka a change).","title":"Working with Kustomize"},{"location":"kustomize/#working-with-kustomize","text":"Monokle has built-in support for Kustomize - a popular tool for managing kubernetes configurations: Monokle can visualize dependencies and relationships between kustomize files to help you understand the scope of a specific kustomization Monokle can preview resources generated by Kustomize, helping you debug your configurations before you deploy them to your cluster (requires kubectl to be installed and configured in your PATH) (all examples below are from the Argo Rollouts manifest folder - clone and try these yourself!)","title":"Working with Kustomize"},{"location":"kustomize/#kustomize-navigation","text":"When selecting a folder containing kustomization.yaml files, these will automatically be displayed in a \"Kustomizations\" section on top of the Navigator: In the screenshot: the Kustomizations section shows all kustomization.yaml files - named after the folder they are in relative to the selected root folder the \"base\" kustomization.yaml has been selected the corresponding kustomization.yaml file has been highlighted to the left all \"downstream\" kustomizations and included resources are highlighted in the Navigator, helping you understand the \"scope\" of the selected kustomization the content of the kustomzation resource is shown in the Source editor to the right, with corresponding resource links marked in the code Just as with K8s resources, hovering over the link-icon to the right of the kustomization name shows its outgoing links: (here we can see the 10 resources included by the selected kustomization) Hovering the link-icon to the left of the kustomization name shows its incoming links: (here we see two \"upstream\" kustomizations that include the selected kustomization in their configuration)","title":"Kustomize Navigation"},{"location":"kustomize/#kustomize-preview","text":"While the above helps you understand the relationships and dependencies between kustomizations and their included resources, the Preview functionality helps you understand what resources would be installed in your cluster when running kustomize. Hovering over a kustomization reveals a \"Preview\" action to the right: Selecting this action will run kustomize on the selected file with the \"-k\" option and replace the contents of the Navigator with the generated resources. For example previewing the \"base\" kustomization above will result in the following: Monokle is now in \"Preview Mode\" (as indicated by the header at the top): the File Explorer has been disabled the Navigator now contains all resources generated by running Kustomize with the \"base\" kustomization: resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode resource links are shown as before with corresponding popups/links/etc. selecting \"Preview\" for a different kustomization will preview the output of kustomize for that resource instead selecting \"Exit\" in the top right or next to the kustomization restores the previous resource navigator. In the screenshot we can see that the selected kustomization resulted in 10 resources - and that they contain references to the image specified in the kustomization configuration:","title":"Kustomize Preview"},{"location":"kustomize/#editing-of-kustomizations-during-preview","text":"When previewing a kustomization it is possible to edit the previewed kustomization.yaml file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files (instead of having to exit and recreate the preview to maka a change).","title":"Editing of kustomizations during preview"},{"location":"overview/","text":"UI Overview Monokle is layed out like many other desktop applications: Left to right: The vertical toolbar to the far left allows you to switch between File and Cluster mode. The File Explorer (shown in screenshot) shows the contents of the currently selected folder. The Navigator in the center shows all resources found in the current folder or cluster. By default it shows all possible Resource sections and subsections - when selecting a folder or cluster only those sections that actually contain any resources will be shown. The Editor section to the right contains editors/views/actions for the currently selected resource or file The top right contains the following buttons Settings (see below) GitHub -> opens the Monokle GitHub repo in your system browser. Help -> opens the Monokle documentation in your system browser Settings Clicking the Settings icon on the top right opens the settings: Kubeconfig : sets which kubeconfig Monokle should use for all cluster interactions Files: Include : which files to parse for kubernetes resources when scanning folders Files: Exclude : which files/folders to exclude when scanning folders for resources Helm Preview Mode : which Helm command to use for generating previews (see Working with Helm Charts ) Template: uses Helm Template Install: uses Helm Install On Startup : Automatically load last folder: will do just that on startup! Maximum folder-read recursion depth : configures how \"deep\" Monokle will parse a specified folder (to avoid going too deep) System Menu Monokle provides a system menu with common File/Edit/View/Window/Help functionality Mac System Menu: Windows System Menu: Multiple Windows You can launch multiple project windows using the New Monokle Windows option. It allows you to work on multiple folders or clusters simultaneously. Thus visual navigation for the recently used pages becomes simpler and faster. Action: File > New Monokle Window Keyboard Shortcuts Monokle current supports the following keyboard shortcuts: Cluster Preview: Ctrl/Cmd I Settings: Ctrl/Cmd P Exit Preview: ESC Browse Folder: Ctrl/Cmd O Refresh Folder: Ctrl/Cmd F5 Toggle Left Pane: Ctrl/Cmd B Toggle Right Pane: Ctrl/Cmd ALT B Save (in editors): Ctrl/Cmd S Navigate Back (Selection History): ALT ArrowLeft Navigate Forward (Selection History): ALT ArrowRight Open New Resource Wizard: Ctrl/Cmd N Apply Resource or File to cluster: Ctrl/Cmd ALT S Diff Resource: Ctrl/Cmd ALT D Reset Resource Filters: Ctrl/Cmd ALT R Auto-update The Monokle (on Mac) / Help (on Windows) system menus provide a \"Check for Udpate\" action that will check for an update and prompt to download if available.","title":"UI Overview"},{"location":"overview/#ui-overview","text":"Monokle is layed out like many other desktop applications: Left to right: The vertical toolbar to the far left allows you to switch between File and Cluster mode. The File Explorer (shown in screenshot) shows the contents of the currently selected folder. The Navigator in the center shows all resources found in the current folder or cluster. By default it shows all possible Resource sections and subsections - when selecting a folder or cluster only those sections that actually contain any resources will be shown. The Editor section to the right contains editors/views/actions for the currently selected resource or file The top right contains the following buttons Settings (see below) GitHub -> opens the Monokle GitHub repo in your system browser. Help -> opens the Monokle documentation in your system browser","title":"UI Overview"},{"location":"overview/#settings","text":"Clicking the Settings icon on the top right opens the settings: Kubeconfig : sets which kubeconfig Monokle should use for all cluster interactions Files: Include : which files to parse for kubernetes resources when scanning folders Files: Exclude : which files/folders to exclude when scanning folders for resources Helm Preview Mode : which Helm command to use for generating previews (see Working with Helm Charts ) Template: uses Helm Template Install: uses Helm Install On Startup : Automatically load last folder: will do just that on startup! Maximum folder-read recursion depth : configures how \"deep\" Monokle will parse a specified folder (to avoid going too deep)","title":"Settings"},{"location":"overview/#system-menu","text":"Monokle provides a system menu with common File/Edit/View/Window/Help functionality Mac System Menu: Windows System Menu:","title":"System Menu"},{"location":"overview/#multiple-windows","text":"You can launch multiple project windows using the New Monokle Windows option. It allows you to work on multiple folders or clusters simultaneously. Thus visual navigation for the recently used pages becomes simpler and faster. Action: File > New Monokle Window","title":"Multiple Windows"},{"location":"overview/#keyboard-shortcuts","text":"Monokle current supports the following keyboard shortcuts: Cluster Preview: Ctrl/Cmd I Settings: Ctrl/Cmd P Exit Preview: ESC Browse Folder: Ctrl/Cmd O Refresh Folder: Ctrl/Cmd F5 Toggle Left Pane: Ctrl/Cmd B Toggle Right Pane: Ctrl/Cmd ALT B Save (in editors): Ctrl/Cmd S Navigate Back (Selection History): ALT ArrowLeft Navigate Forward (Selection History): ALT ArrowRight Open New Resource Wizard: Ctrl/Cmd N Apply Resource or File to cluster: Ctrl/Cmd ALT S Diff Resource: Ctrl/Cmd ALT D Reset Resource Filters: Ctrl/Cmd ALT R","title":"Keyboard Shortcuts"},{"location":"overview/#auto-update","text":"The Monokle (on Mac) / Help (on Windows) system menus provide a \"Check for Udpate\" action that will check for an update and prompt to download if available.","title":"Auto-update"},{"location":"resource-editing/","text":"Resource Editing Monokle allows you to edit resource manifests either in a Source Editor Source Editor Selecting either a file or resource will show its contents in the source editor to the right. The editor will syntax-highlight for yaml and provide context-sensitive help and auto-complete functionality for standard kubernetes objects. Right-clicking in the editor shows a list of available commands - and pressing F1 opens its command-palette: Editing Resources When editing resources (not files) the editor is schema-aware for all native Kubernetes resources, which provides auto-complete (Ctrl-Space) and context-sensitive hover documentation Resource Links Resource links are marked in the gutter and underlined in the editor, with corresponding hover/popup windows to show linked resources: Broken links are shown with yellow triangles as in the Navigator: Add Resource While using Monokle, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the \u201cNew Resource\u201d button at the top of the navigator to launch the \u201cAdd New Resource\u201d dialog. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface. Edit Resources in Cluster You can easily view and edit resources from clusters. After making changes in a resource, you can quickly apply them back to the cluster. Saving changes The [Save] button on top of the editor will be enabled if valid changes have been made - invalid yaml will not be savable. Saving a resource will update the containing file correspondingly and recalculate all affected ingoing/outging links for the resource. Editing Files When editing files directly by selecting them in the File Explorer the editor will at this point not show any links or provide context-sensitive editing functionality. Form Editor To start with Monokle only shows a Form Editor for ConfigMap resources: The editor provides form fields for key ConfigMap properties, allowing you to edit/discover all available properties without having to learn or lookup the corresponding yaml/resource documentation. Any changes made and saved (with the Save button on the top right) are written back to the underlying yaml. Check out this tutorial for more details on how to use the Form editor for ConfigMaps. Rename Resource You can rename resources and update all the references associated with that resource to ensure the integrity of that link. Clone Resource You can use clone action to create a new resource by using existing resources as a template. Delete Resource You can use the delete action in the cluster mode to delete the resource from the actual cluster. Resource Template While creating a resource, it is possible to select an existing resource as a template from the drop-down menu.","title":"Resource Editing"},{"location":"resource-editing/#resource-editing","text":"Monokle allows you to edit resource manifests either in a Source Editor","title":"Resource Editing"},{"location":"resource-editing/#source-editor","text":"Selecting either a file or resource will show its contents in the source editor to the right. The editor will syntax-highlight for yaml and provide context-sensitive help and auto-complete functionality for standard kubernetes objects. Right-clicking in the editor shows a list of available commands - and pressing F1 opens its command-palette:","title":"Source Editor"},{"location":"resource-editing/#editing-resources","text":"When editing resources (not files) the editor is schema-aware for all native Kubernetes resources, which provides auto-complete (Ctrl-Space) and context-sensitive hover documentation","title":"Editing Resources"},{"location":"resource-editing/#resource-links","text":"Resource links are marked in the gutter and underlined in the editor, with corresponding hover/popup windows to show linked resources: Broken links are shown with yellow triangles as in the Navigator:","title":"Resource Links"},{"location":"resource-editing/#add-resource","text":"While using Monokle, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the \u201cNew Resource\u201d button at the top of the navigator to launch the \u201cAdd New Resource\u201d dialog. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface.","title":"Add Resource"},{"location":"resource-editing/#edit-resources-in-cluster","text":"You can easily view and edit resources from clusters. After making changes in a resource, you can quickly apply them back to the cluster.","title":"Edit Resources in Cluster"},{"location":"resource-editing/#saving-changes","text":"The [Save] button on top of the editor will be enabled if valid changes have been made - invalid yaml will not be savable. Saving a resource will update the containing file correspondingly and recalculate all affected ingoing/outging links for the resource.","title":"Saving changes"},{"location":"resource-editing/#editing-files","text":"When editing files directly by selecting them in the File Explorer the editor will at this point not show any links or provide context-sensitive editing functionality.","title":"Editing Files"},{"location":"resource-editing/#form-editor","text":"To start with Monokle only shows a Form Editor for ConfigMap resources: The editor provides form fields for key ConfigMap properties, allowing you to edit/discover all available properties without having to learn or lookup the corresponding yaml/resource documentation. Any changes made and saved (with the Save button on the top right) are written back to the underlying yaml. Check out this tutorial for more details on how to use the Form editor for ConfigMaps.","title":"Form Editor"},{"location":"resource-editing/#rename-resource","text":"You can rename resources and update all the references associated with that resource to ensure the integrity of that link.","title":"Rename Resource"},{"location":"resource-editing/#clone-resource","text":"You can use clone action to create a new resource by using existing resources as a template.","title":"Clone Resource"},{"location":"resource-editing/#delete-resource","text":"You can use the delete action in the cluster mode to delete the resource from the actual cluster.","title":"Delete Resource"},{"location":"resource-editing/#resource-template","text":"While creating a resource, it is possible to select an existing resource as a template from the drop-down menu.","title":"Resource Template"},{"location":"resource-navigation/","text":"Resource Navigation Resources can be loaded either from the file system or a configured cluster. Selecting the \"Browse\" button in the File Explorer prompts for a folder containing resource manifests Selecting \"Show Cluster Objects\" in the Cluster Explorer loads available resources using the configured kubeconfig variable, see Cluster Preview for more details Once selecting a folder the File Explorer and Navigators will be populated accordingly. Monokle will attempt to synchronize automatically with any external file/folder changes made in the selected folder, but the Refresh button next to the Browse button allows for manual reloading of the folder if needed. File Explorer The File Explorer now shows all files parsed in the specified folder excluded files are greyed out files containing resource manifests have a number displayed after them, showing the number of resources found in that file Selecting a file will highlight contained resources in the Navigator and attempt to scroll them into view. The contents of the file will be shown in the source editor to the right - allowing for direct editing of the file. In this screenshot the argo-rollouts-aggregate-roles.yaml file is selected - the \"3\" after the filename indicates it contains 3 kubernetes resources the 3 ClusterRole resources in thie file are highlighed in the Navigator in the middle the contents of the file are shown in the editor to the right Resource Navigator The Navigator shows all resources found recursively in the selected folder. Resources are grouped into sections/subsections based on their usage in Kubernetes. Selecting a resource automatically highlights both the file containing that resource and any other resourced linked to the selected one: In this screenshot the argo-rollouts-metrics service is selected the associated argo-rollouts-metrics-service.yaml file is highlighted to the left the linked argo-rollouts Deployment (via the selector in the Service manifest) is highlighted the Service manifest is shown in the editor to the right (with highlighting of the link to the Deployment on line 16) Resource Links Links between resources are indicated by link icons to the left and right each resource name: Links to the left indicate there are incoming link to the resource, for example a ConfigMap might have an incoming link from a Deployment Links to the right indicate there are outgoing links from the resource, for example a Service might have a selector that selects a Deployment Hovering over a link icon will show a popup with all links (either incoming or outgoing) allowing you to click on a link to take you to that resource in the navigator: Here the popup shows the outgoing link from the argo-rollouts-metrics Service to the `argo-rollouts Deployment (via the selector in the Service manifest) If a link is \"unfulfilled\", i.e. not referring to any object currently in the navigator it is marked with a warning triangle - making it easy to identify broken resource-links in your manifests: In this screenshot the argo-rollouts-role-binding RoleBinding contains a reference to an argo-rollouts-role Role, which doesn't exist in the current manifests. Clicking on broken links will open the corresponding reference in the editor so you can easily fix it. Resource Validation Monokle automatically validates all resources of the corresponding kubernetes 1.22.1 schemas. The resource which is not validated is shown with a red error icon in the navigator. You can click on the error information button to check the error details. Resource Filtering Resource filters allows you to filter the resources based on various properties such as: Name Kind Namespace Labels Annotations Click on the filter button on the top of the navigator to launch the dialog for configuration. Reload Folder On Startup You can choose to reload the last reviewed folder while launching Monokle. For this purpose, you will have to navigate to the Settings and simply tick the Automatically Load Last Folder checkbox. Navigation History You can easily navigate back and forth between the selected resources with the help of the Navigation button. Expand/Collapse Sections In resource navigator, you can expand or collapse individual or all sections in the resource navigator. Recent Folders The recent Folders option has been added to the system menu to make it easy to switch between your favorite resource-manifest folders. Action: File > Recent Folders Supported Resource links Monokle currently finds and visualizes the following links between kubernetes resources - please let us know if we missed something or got it wrong! Resource Type Outgoing Link(s) identified Secret metadata.annotations.kubernetes.io/service-account.name => ServiceAccount metadata.name (optional) Service content.spec.selector => Deployment `spec.template.metadata.labels`` PodSpec in Deployment / Pod / DaemonSet / Job / StatefulSet / ReplicaSet / CronJob / ReplicationController ..configMapRef.name => ConfigMap metadata.name , ..configMapKeyRef.name => ConfigMap metadata.name , ..volumes[*].configMap.name => ConfigMap metadata.name , ..volumes[*].secret.secretMame => Secret metadata.name , ..secretKeyRef.name => Secret metadata.name , ..imagePullSecrets => Secret metadata.name , ..serviceAccountName => ServiceAccount metadata.name ServiceAccount ..secrets => Secret metadata.name PersistentVolume spec.claimRef.name => PersistentVolumeClaim metadata.name PersistentVolumeClaim spec.volumeName => PersistentVolume metadata.name Endpoints metadata.name => Service metadata.name ClusterRoleBinding roleRef.name => ClusterRole metadata.name RoleBinding roleRef.name => ClusterRoleBinding or Role metadata.name Ingress ..backend.service.name => Service metadata.name , ..resource.* => any object in same namespace","title":"Navigating Resources"},{"location":"resource-navigation/#resource-navigation","text":"Resources can be loaded either from the file system or a configured cluster. Selecting the \"Browse\" button in the File Explorer prompts for a folder containing resource manifests Selecting \"Show Cluster Objects\" in the Cluster Explorer loads available resources using the configured kubeconfig variable, see Cluster Preview for more details Once selecting a folder the File Explorer and Navigators will be populated accordingly. Monokle will attempt to synchronize automatically with any external file/folder changes made in the selected folder, but the Refresh button next to the Browse button allows for manual reloading of the folder if needed.","title":"Resource Navigation"},{"location":"resource-navigation/#file-explorer","text":"The File Explorer now shows all files parsed in the specified folder excluded files are greyed out files containing resource manifests have a number displayed after them, showing the number of resources found in that file Selecting a file will highlight contained resources in the Navigator and attempt to scroll them into view. The contents of the file will be shown in the source editor to the right - allowing for direct editing of the file. In this screenshot the argo-rollouts-aggregate-roles.yaml file is selected - the \"3\" after the filename indicates it contains 3 kubernetes resources the 3 ClusterRole resources in thie file are highlighed in the Navigator in the middle the contents of the file are shown in the editor to the right","title":"File Explorer"},{"location":"resource-navigation/#resource-navigator","text":"The Navigator shows all resources found recursively in the selected folder. Resources are grouped into sections/subsections based on their usage in Kubernetes. Selecting a resource automatically highlights both the file containing that resource and any other resourced linked to the selected one: In this screenshot the argo-rollouts-metrics service is selected the associated argo-rollouts-metrics-service.yaml file is highlighted to the left the linked argo-rollouts Deployment (via the selector in the Service manifest) is highlighted the Service manifest is shown in the editor to the right (with highlighting of the link to the Deployment on line 16)","title":"Resource Navigator"},{"location":"resource-navigation/#resource-links","text":"Links between resources are indicated by link icons to the left and right each resource name: Links to the left indicate there are incoming link to the resource, for example a ConfigMap might have an incoming link from a Deployment Links to the right indicate there are outgoing links from the resource, for example a Service might have a selector that selects a Deployment Hovering over a link icon will show a popup with all links (either incoming or outgoing) allowing you to click on a link to take you to that resource in the navigator: Here the popup shows the outgoing link from the argo-rollouts-metrics Service to the `argo-rollouts Deployment (via the selector in the Service manifest) If a link is \"unfulfilled\", i.e. not referring to any object currently in the navigator it is marked with a warning triangle - making it easy to identify broken resource-links in your manifests: In this screenshot the argo-rollouts-role-binding RoleBinding contains a reference to an argo-rollouts-role Role, which doesn't exist in the current manifests. Clicking on broken links will open the corresponding reference in the editor so you can easily fix it.","title":"Resource Links"},{"location":"resource-navigation/#resource-validation","text":"Monokle automatically validates all resources of the corresponding kubernetes 1.22.1 schemas. The resource which is not validated is shown with a red error icon in the navigator. You can click on the error information button to check the error details.","title":"Resource Validation"},{"location":"resource-navigation/#resource-filtering","text":"Resource filters allows you to filter the resources based on various properties such as: Name Kind Namespace Labels Annotations Click on the filter button on the top of the navigator to launch the dialog for configuration.","title":"Resource Filtering"},{"location":"resource-navigation/#reload-folder-on-startup","text":"You can choose to reload the last reviewed folder while launching Monokle. For this purpose, you will have to navigate to the Settings and simply tick the Automatically Load Last Folder checkbox.","title":"Reload Folder On Startup"},{"location":"resource-navigation/#navigation-history","text":"You can easily navigate back and forth between the selected resources with the help of the Navigation button.","title":"Navigation History"},{"location":"resource-navigation/#expandcollapse-sections","text":"In resource navigator, you can expand or collapse individual or all sections in the resource navigator.","title":"Expand/Collapse Sections"},{"location":"resource-navigation/#recent-folders","text":"The recent Folders option has been added to the system menu to make it easy to switch between your favorite resource-manifest folders. Action: File > Recent Folders","title":"Recent Folders"},{"location":"resource-navigation/#supported-resource-links","text":"Monokle currently finds and visualizes the following links between kubernetes resources - please let us know if we missed something or got it wrong! Resource Type Outgoing Link(s) identified Secret metadata.annotations.kubernetes.io/service-account.name => ServiceAccount metadata.name (optional) Service content.spec.selector => Deployment `spec.template.metadata.labels`` PodSpec in Deployment / Pod / DaemonSet / Job / StatefulSet / ReplicaSet / CronJob / ReplicationController ..configMapRef.name => ConfigMap metadata.name , ..configMapKeyRef.name => ConfigMap metadata.name , ..volumes[*].configMap.name => ConfigMap metadata.name , ..volumes[*].secret.secretMame => Secret metadata.name , ..secretKeyRef.name => Secret metadata.name , ..imagePullSecrets => Secret metadata.name , ..serviceAccountName => ServiceAccount metadata.name ServiceAccount ..secrets => Secret metadata.name PersistentVolume spec.claimRef.name => PersistentVolumeClaim metadata.name PersistentVolumeClaim spec.volumeName => PersistentVolume metadata.name Endpoints metadata.name => Service metadata.name ClusterRoleBinding roleRef.name => ClusterRole metadata.name RoleBinding roleRef.name => ClusterRoleBinding or Role metadata.name Ingress ..backend.service.name => Service metadata.name , ..resource.* => any object in same namespace","title":"Supported Resource links"},{"location":"tutorials/how-to-browse-clusters/","text":"How to Browse Clusters In this Monokle tutorial, we will illustrate the steps to connect to a cluster and navigate/update contained resources. Let\u2019s get started. 1. Select Cluster Preview Launch Monokle and click on the Cluster Preview button in the file explorer. 2. Specify kubeconfig Click on the Browse button to fetch the kubeconfig file for configuring cluster access. Alternatively, you can also enter the kubeconfig file path manually in the KUBECONFIG text field. Note: The kubectl command-line tool uses kubeconfig files to find the information it needs to choose a cluster and communicate with the API server. 3. Retrieve Cluster objects Click on the Show Cluster Objects button to launch the resources in the configured cluster. Monokle will switch to the Cluster-Mode, and the Navigator will reflect all the resources retrieved from the configured cluster. 4. Navigate / Select resources Select a resource to view its source code in the source editor. You can edit resources in cluster-mode, allowing you to make quick changes and apply them back to your cluster 5. Diff changes against Cluster Click the Diff button to analyze and compare the selected resource against the currently configured cluster. The comparison table will look like this: 6. Apply changes Click on the Apply button to update the resource to the currently configured cluster. Resource applied will be shown in the top-right corner of the console. 7. Exit Cluster mode Click on the Exit button on the top-right corner of the console to restore the resources of the currently selected folder. Thus you can browse cluster resources. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"How to Browse Clusters"},{"location":"tutorials/how-to-browse-clusters/#how-to-browse-clusters","text":"In this Monokle tutorial, we will illustrate the steps to connect to a cluster and navigate/update contained resources. Let\u2019s get started.","title":"How to Browse Clusters"},{"location":"tutorials/how-to-browse-clusters/#1-select-cluster-preview","text":"Launch Monokle and click on the Cluster Preview button in the file explorer.","title":"1. Select Cluster Preview"},{"location":"tutorials/how-to-browse-clusters/#2-specify-kubeconfig","text":"Click on the Browse button to fetch the kubeconfig file for configuring cluster access. Alternatively, you can also enter the kubeconfig file path manually in the KUBECONFIG text field. Note: The kubectl command-line tool uses kubeconfig files to find the information it needs to choose a cluster and communicate with the API server.","title":"2. Specify kubeconfig"},{"location":"tutorials/how-to-browse-clusters/#3-retrieve-cluster-objects","text":"Click on the Show Cluster Objects button to launch the resources in the configured cluster. Monokle will switch to the Cluster-Mode, and the Navigator will reflect all the resources retrieved from the configured cluster.","title":"3. Retrieve Cluster objects"},{"location":"tutorials/how-to-browse-clusters/#4-navigate-select-resources","text":"Select a resource to view its source code in the source editor. You can edit resources in cluster-mode, allowing you to make quick changes and apply them back to your cluster","title":"4. Navigate / Select resources"},{"location":"tutorials/how-to-browse-clusters/#5-diff-changes-against-cluster","text":"Click the Diff button to analyze and compare the selected resource against the currently configured cluster. The comparison table will look like this:","title":"5. Diff changes against Cluster"},{"location":"tutorials/how-to-browse-clusters/#6-apply-changes","text":"Click on the Apply button to update the resource to the currently configured cluster. Resource applied will be shown in the top-right corner of the console.","title":"6. Apply changes"},{"location":"tutorials/how-to-browse-clusters/#7-exit-cluster-mode","text":"Click on the Exit button on the top-right corner of the console to restore the resources of the currently selected folder. Thus you can browse cluster resources. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"7. Exit Cluster mode"},{"location":"tutorials/how-to-configure-monokle/","text":"How to Configure Monokle In this tutorial, we will show the steps to configure Monokle Environment. Note: All settings are initialised with default values - there is no immediate need to change them. Let\u2019s get started! 1. Open Settings Launch Monokle and click on the Settings button to access Settings 2. Set kubeconfig Enter the kubeconfig file path in the KUBECONFIG text field. The kubeconfig parameter is used when viewing cluster resources and applying/diffing local resources to a cluster. Alternatively, you can click on the Browse button to fetch the kubeconfig file for configuring cluster access. Select the required folder to config the cluster. Note: The kubectl command-line tool uses kubeconfig files to find the information for choosing a cluster and communicating with the API server. 3. File Includes Monokle will look for kubernetes manifests in files matching this filter, by default this is set to .yaml / .yml files. Click on the Add Pattern button to include the files having the corresponding extension. Enter the extension pattern in the files include textbox and hit the OK button. 4. File Exclusions Monokle will ignore files/folders matching any of the specified paths (even if they match an above inclusion pattern), Click on the Add Pattern button to exclude the files having the corresponding extension. For example, node_modules. Enter the extension pattern in the files exclude textbox and hit the OK button. 5. Helm Preview Mode Click on Helm Preview Mode dropdown to select any of the viewing states. The options for preview: Template - To use the Helm template command Install - To use the Helm Install command 6. On Startup Tick the Automatically Load Last Folder checkbox to reload the last reviewed folder when launching Monokle. Thus you can configure your Monokle environment. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"How to Configure Monokle"},{"location":"tutorials/how-to-configure-monokle/#how-to-configure-monokle","text":"In this tutorial, we will show the steps to configure Monokle Environment. Note: All settings are initialised with default values - there is no immediate need to change them. Let\u2019s get started!","title":"How to Configure Monokle"},{"location":"tutorials/how-to-configure-monokle/#1-open-settings","text":"Launch Monokle and click on the Settings button to access Settings","title":"1. Open Settings"},{"location":"tutorials/how-to-configure-monokle/#2-set-kubeconfig","text":"Enter the kubeconfig file path in the KUBECONFIG text field. The kubeconfig parameter is used when viewing cluster resources and applying/diffing local resources to a cluster. Alternatively, you can click on the Browse button to fetch the kubeconfig file for configuring cluster access. Select the required folder to config the cluster. Note: The kubectl command-line tool uses kubeconfig files to find the information for choosing a cluster and communicating with the API server.","title":"2. Set kubeconfig"},{"location":"tutorials/how-to-configure-monokle/#3-file-includes","text":"Monokle will look for kubernetes manifests in files matching this filter, by default this is set to .yaml / .yml files. Click on the Add Pattern button to include the files having the corresponding extension. Enter the extension pattern in the files include textbox and hit the OK button.","title":"3. File Includes"},{"location":"tutorials/how-to-configure-monokle/#4-file-exclusions","text":"Monokle will ignore files/folders matching any of the specified paths (even if they match an above inclusion pattern), Click on the Add Pattern button to exclude the files having the corresponding extension. For example, node_modules. Enter the extension pattern in the files exclude textbox and hit the OK button.","title":"4. File Exclusions"},{"location":"tutorials/how-to-configure-monokle/#5-helm-preview-mode","text":"Click on Helm Preview Mode dropdown to select any of the viewing states. The options for preview: Template - To use the Helm template command Install - To use the Helm Install command","title":"5. Helm Preview Mode"},{"location":"tutorials/how-to-configure-monokle/#6-on-startup","text":"Tick the Automatically Load Last Folder checkbox to reload the last reviewed folder when launching Monokle. Thus you can configure your Monokle environment. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"6. On Startup"},{"location":"tutorials/how-to-create-and-edit-configmap/","text":"How to work with ConfigMaps In this Monokle tutorial, we will illustrate how to create and edit ConfigMap resources to store non-confidential data in key-value pairs. Let\u2019s get started. Launch Monokle Launch Monokle and click on the Browse button to add your project folder containing K8 resources. Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Select Folder Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships. Select Manifests Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources shall be highlighted automatically in the navigator. Create a new resource Click on the Add button in the Navigator to launch the Add New Resource dialog for creating resources. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface. Use the source Editor Step 1: Navigate and select the ConfigMap resources in the Navigator. Once you select a resource, its source code will be launched automatically in the source editor. The Source Editor allows you to view and edit the source code easily. Step 2: Click on the Source button to view and edit the source code. Step 3: Right-click anywhere on the source editor to launch the menu and select the required editing option from the drop-down list. You can also edit the source code using the Form Editor that does not require any coding effort. Using the Form Editor The form editor collects the required information and passes it to another entity. To launch the form editor, click on the Form button. For Configuration Data Step 1: Click on the Add Item button to create a new text field for data configuration. Step 2: Enter the text configuration data in key-value pair fields. Note: You can also edit the existing data in the key-value pair fields. For Binary Configuration Data Step 1: Click on the Add Item button to create a new binary data field for binary data configuration. Step 2: Enter the binary configuration data in key-value pair fields. Note: You can also edit the existing binary configuration data in the fields. Step 3: Tick the Immutable checkbox to ensure the data stored in the ConfigMap is not updated. Now you can start editing the object metadata. Object Metadata For editing object metadata you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object. For Name Step 1: Enter the specific key name in the name field to give a unique identity to the object. Note: The name of the ConfigMap must be unique within a namespace. For Namespace Step 1: Enter namespace in the namespace field to organize clusters into virtual sub-clusters. Note: Provide a unique namespace within the ConfigMap. If left empty, then the default namespace value shall be assigned automatically. For Annotations Step 1: Click on the Add Item button to create the new key-value field for annotations. Step 2: Enter the arbitrary metadata in key-value pair fields. Note: You can also edit the existing arbitrary metadata data in the fields. For Labels Step 1: Click on Add Item button to create the new key-value field for labels. Step 2: Enter the label's details in the key-value pair field. Note: you also can edit the existing label data in the fields. For Cluster Name Enter the name of the cluster in the cluster field to which the object belongs. For Generate Name Enter a prefix in the Generate Name field. Note: You can also edit the existing data in the generate name fields. For Finalizers Step 1: Click on the Add item button to create the new finalizer field. Step 2: Enter the finalizer in the finalizers field. Note: You also can edit the existing data in the finalizer fields. It prompts Kubernetes to wait until specific conditions are met before it fully deletes resources marked for deletion. Note: Finalizer must be empty before the object is deleted from the registry. The source editor provides autocomplete and autosave options, and hence you don\u2019t have to manually save your edits. Thus you can edit the ConfigMap. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"How to work with ConfigMaps"},{"location":"tutorials/how-to-create-and-edit-configmap/#how-to-work-with-configmaps","text":"In this Monokle tutorial, we will illustrate how to create and edit ConfigMap resources to store non-confidential data in key-value pairs. Let\u2019s get started.","title":"How to work with ConfigMaps"},{"location":"tutorials/how-to-create-and-edit-configmap/#launch-monokle","text":"Launch Monokle and click on the Browse button to add your project folder containing K8 resources. Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80","title":"Launch Monokle"},{"location":"tutorials/how-to-create-and-edit-configmap/#select-folder","text":"Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships.","title":"Select Folder"},{"location":"tutorials/how-to-create-and-edit-configmap/#select-manifests","text":"Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources shall be highlighted automatically in the navigator.","title":"Select Manifests"},{"location":"tutorials/how-to-create-and-edit-configmap/#create-a-new-resource","text":"Click on the Add button in the Navigator to launch the Add New Resource dialog for creating resources. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface.","title":"Create a new resource"},{"location":"tutorials/how-to-create-and-edit-configmap/#use-the-source-editor","text":"Step 1: Navigate and select the ConfigMap resources in the Navigator. Once you select a resource, its source code will be launched automatically in the source editor. The Source Editor allows you to view and edit the source code easily. Step 2: Click on the Source button to view and edit the source code. Step 3: Right-click anywhere on the source editor to launch the menu and select the required editing option from the drop-down list. You can also edit the source code using the Form Editor that does not require any coding effort.","title":"Use the source Editor"},{"location":"tutorials/how-to-create-and-edit-configmap/#using-the-form-editor","text":"The form editor collects the required information and passes it to another entity. To launch the form editor, click on the Form button.","title":"Using the Form Editor"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-configuration-data","text":"Step 1: Click on the Add Item button to create a new text field for data configuration. Step 2: Enter the text configuration data in key-value pair fields. Note: You can also edit the existing data in the key-value pair fields.","title":"For Configuration Data"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-binary-configuration-data","text":"Step 1: Click on the Add Item button to create a new binary data field for binary data configuration. Step 2: Enter the binary configuration data in key-value pair fields. Note: You can also edit the existing binary configuration data in the fields. Step 3: Tick the Immutable checkbox to ensure the data stored in the ConfigMap is not updated. Now you can start editing the object metadata.","title":"For Binary Configuration Data"},{"location":"tutorials/how-to-create-and-edit-configmap/#object-metadata","text":"For editing object metadata you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object.","title":"Object Metadata"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-name","text":"Step 1: Enter the specific key name in the name field to give a unique identity to the object. Note: The name of the ConfigMap must be unique within a namespace.","title":"For Name"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-namespace","text":"Step 1: Enter namespace in the namespace field to organize clusters into virtual sub-clusters. Note: Provide a unique namespace within the ConfigMap. If left empty, then the default namespace value shall be assigned automatically.","title":"For Namespace"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-annotations","text":"Step 1: Click on the Add Item button to create the new key-value field for annotations. Step 2: Enter the arbitrary metadata in key-value pair fields. Note: You can also edit the existing arbitrary metadata data in the fields.","title":"For Annotations"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-labels","text":"Step 1: Click on Add Item button to create the new key-value field for labels. Step 2: Enter the label's details in the key-value pair field. Note: you also can edit the existing label data in the fields.","title":"For Labels"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-cluster-name","text":"Enter the name of the cluster in the cluster field to which the object belongs.","title":"For Cluster Name"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-generate-name","text":"Enter a prefix in the Generate Name field. Note: You can also edit the existing data in the generate name fields.","title":"For Generate Name"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-finalizers","text":"Step 1: Click on the Add item button to create the new finalizer field. Step 2: Enter the finalizer in the finalizers field. Note: You also can edit the existing data in the finalizer fields. It prompts Kubernetes to wait until specific conditions are met before it fully deletes resources marked for deletion. Note: Finalizer must be empty before the object is deleted from the registry. The source editor provides autocomplete and autosave options, and hence you don\u2019t have to manually save your edits. Thus you can edit the ConfigMap. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"For Finalizers"},{"location":"tutorials/how-to-fix-broken-links/","text":"How to Fix Broken Links In this Monokle tutorial, we have illustrated the steps to fix broken links. Let\u2019s get started. 1. Launch Monokle Launch Monokle and click on the Browse button to add your project folder containing K8 resources. Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 2. Select Folder Select your folder to parse its manifest in Monokle\u2019s File Explorer. In the file explorer, you can view manifests, including their resources, and their relationships. 3. Navigate resource manifests Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources shall be highlighted automatically in the navigator. 4. Find broken links Scroll down in the navigator and hover over a resource link with a warning signal. Note: The link with a warning signal indicates that it\u2019s broken 5. Click on broken link Click on the link provided in the tooltip. Note: The source code for the specific resource will be highlighted automatically in the editor. 6. Update the link in the source editor Manually update the name of the highlighted dead endpoint with a working endpoint to fix dead-end broken links. The warning triangle will automatically go away once a valid link is provided. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"How to Fix Broken Links"},{"location":"tutorials/how-to-fix-broken-links/#how-to-fix-broken-links","text":"In this Monokle tutorial, we have illustrated the steps to fix broken links. Let\u2019s get started.","title":"How to Fix Broken Links"},{"location":"tutorials/how-to-fix-broken-links/#1-launch-monokle","text":"Launch Monokle and click on the Browse button to add your project folder containing K8 resources. Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80","title":"1. Launch Monokle"},{"location":"tutorials/how-to-fix-broken-links/#2-select-folder","text":"Select your folder to parse its manifest in Monokle\u2019s File Explorer. In the file explorer, you can view manifests, including their resources, and their relationships.","title":"2. Select Folder"},{"location":"tutorials/how-to-fix-broken-links/#3-navigate-resource-manifests","text":"Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources shall be highlighted automatically in the navigator.","title":"3. Navigate resource manifests"},{"location":"tutorials/how-to-fix-broken-links/#4-find-broken-links","text":"Scroll down in the navigator and hover over a resource link with a warning signal. Note: The link with a warning signal indicates that it\u2019s broken","title":"4. Find broken links"},{"location":"tutorials/how-to-fix-broken-links/#5-click-on-broken-link","text":"Click on the link provided in the tooltip. Note: The source code for the specific resource will be highlighted automatically in the editor.","title":"5. Click on broken link"},{"location":"tutorials/how-to-fix-broken-links/#6-update-the-link-in-the-source-editor","text":"Manually update the name of the highlighted dead endpoint with a working endpoint to fix dead-end broken links. The warning triangle will automatically go away once a valid link is provided. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"6. Update the link in the source editor"},{"location":"tutorials/how-to-navigate-and-edit-manifests/","text":"How to work with Manifests In this Monokle tutorial, we will illustrate the steps to help you navigate K8s resources and edit their manifests. Let\u2019s get started! 1. Launch Monokle Launch Monokle and click on the Browse button to add your project folder containing K8 resources. Please see Getting Started for how to install Monokle \ud83d\ude80 2. Select your folder Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships. See Resource Navigation for more information on how to navigate resources. 3. Navigate manifests Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources shall be highlighted automatically in the navigator. 4. Navigate resource links Click on outgoing and incoming links to navigate the corresponding resources. The warning triangle reflects that the link refers to broken resource links - see Resource Links 5. Select required resource Select the required resource in the Navigator. Once you select a resource, its source code will be launched and highlighted automatically in the editor. Now you can edit the resource in the editor, any changes you make will be automatically saved. See Resource Editing for more information on how to edit resources. 6. Editing your resource Right-click on the editor to launch the editing menu. The editing menu includes the following options: Go to Symbols: Select the Go to Symbol option to perform a focused search of code for finding specified symbols quickly. Change all occurrences: Select the Change all Occurrences option to replace all string occurrences in the code with any other regular expression. Format Document: Select the Format Document option to organize the source code for better readability. It addresses font size, spacing, margins, alignment, columns, indentation, and lists. Cut: Select the Cut option to delete the unnecessary data. After you cut the text, it gets stored in the clipboard so you can use it later. Copy: Select the Copy option to copy a piece of code. Thus you can reuse the code to save development time. Paste: Select the Paste option to paste a piece of code. It helps in reducing the repetition of efforts required to write and test code. Command Palette: Select the Command Palette option allows you to access keyboard shortcuts quickly for the most common operations. Note: Editor provides autocomplete and autosave options. Thus, you can navigate K8s resources and edit their manifests. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"How to work with Manifests"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#how-to-work-with-manifests","text":"In this Monokle tutorial, we will illustrate the steps to help you navigate K8s resources and edit their manifests. Let\u2019s get started!","title":"How to work with Manifests"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#1-launch-monokle","text":"Launch Monokle and click on the Browse button to add your project folder containing K8 resources. Please see Getting Started for how to install Monokle \ud83d\ude80","title":"1. Launch Monokle"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#2-select-your-folder","text":"Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships. See Resource Navigation for more information on how to navigate resources.","title":"2. Select your folder"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#3-navigate-manifests","text":"Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources shall be highlighted automatically in the navigator.","title":"3. Navigate manifests"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#4-navigate-resource-links","text":"Click on outgoing and incoming links to navigate the corresponding resources. The warning triangle reflects that the link refers to broken resource links - see Resource Links","title":"4. Navigate resource links"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#5-select-required-resource","text":"Select the required resource in the Navigator. Once you select a resource, its source code will be launched and highlighted automatically in the editor. Now you can edit the resource in the editor, any changes you make will be automatically saved. See Resource Editing for more information on how to edit resources.","title":"5. Select required resource"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#6-editing-your-resource","text":"Right-click on the editor to launch the editing menu. The editing menu includes the following options: Go to Symbols: Select the Go to Symbol option to perform a focused search of code for finding specified symbols quickly. Change all occurrences: Select the Change all Occurrences option to replace all string occurrences in the code with any other regular expression. Format Document: Select the Format Document option to organize the source code for better readability. It addresses font size, spacing, margins, alignment, columns, indentation, and lists. Cut: Select the Cut option to delete the unnecessary data. After you cut the text, it gets stored in the clipboard so you can use it later. Copy: Select the Copy option to copy a piece of code. Thus you can reuse the code to save development time. Paste: Select the Paste option to paste a piece of code. It helps in reducing the repetition of efforts required to write and test code. Command Palette: Select the Command Palette option allows you to access keyboard shortcuts quickly for the most common operations. Note: Editor provides autocomplete and autosave options. Thus, you can navigate K8s resources and edit their manifests. Got queries? Please feel free to join our open source community on Discord with this invite link and start your discussion.","title":"6. Editing your resource"}]}